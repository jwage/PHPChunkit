#!/usr/bin/env php
<?php

namespace PHPChunkit;

use PHPChunkit\Container;
use PHPChunkit\PHPChunkit;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

class AutoloaderFinder
{
    const AUTOLOADER_PATH = 'vendor/autoload.php';

    public function findAutoloaderPath()
    {
        $directories = [
            __DIR__.'/..',
            __DIR__.'/../../../..',
            getcwd()
        ];

        foreach ($directories as $directory) {
            $autoloadPath = sprintf('%s/%s', $directory, self::AUTOLOADER_PATH);

            if (file_exists($autoloadPath)) {
                return $autoloadPath;
            }
        }

        throw new \RuntimeException(sprintf('Could not find path to vendor/autoload.php'));
    }
}

// default to the run command
if (isset($_SERVER['argv'][1]) && $_SERVER['argv'][1] !== 'run' && $_SERVER['argv'][1][0] === '-') {
    $args = $_SERVER['argv'];

    $_SERVER['argv'] = [$args[0], 'run'];

    unset($args[0]);

    foreach ($args as $arg) {
        $_SERVER['argv'][] = $arg;
    }
} elseif (!isset($_SERVER['argv'][1])) {
    $_SERVER['argv'][1] = 'run';
}

$autoloaderPath = (new AutoloaderFinder())
    ->findAutoloaderPath();

require_once $autoloaderPath;

$exitCode =(new PHPChunkit(getcwd(), new Container()))
    ->getContainer()['phpchunkit.application']
    ->run(
        new ArgvInput(),
        new ConsoleOutput()
    )
;

exit($exitCode);
